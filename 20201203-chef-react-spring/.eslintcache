[{"C:\\Users\\SIST\\WebstormProjects\\20201203-chef-react-spring\\src\\index.js":"1","C:\\Users\\SIST\\WebstormProjects\\20201203-chef-react-spring\\src\\App.js":"2","C:\\Users\\SIST\\WebstormProjects\\20201203-chef-react-spring\\src\\reportWebVitals.js":"3"},{"size":506,"mtime":1606965150696,"results":"4","hashOfConfig":"5"},{"size":6621,"mtime":1606963980026,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"b9zdzx",{"filePath":"10","messages":"11","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"C:\\Users\\SIST\\WebstormProjects\\20201203-chef-react-spring\\src\\index.js",[],"C:\\Users\\SIST\\WebstormProjects\\20201203-chef-react-spring\\src\\App.js",["16","17","18","19","20"],"import React, {Component, Fragment} from 'react'\nimport axios from 'axios'\n// axios => 요청값을 보내고 결과값을 받아오는 라이브러리\n// 자바스크립트 : 보내고 받는 경우 => Callback\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state={\n      chef:[],\n      page:1,\n      totalpage:0,\n      recipe:[],\n      isShow:0,\n      fd:'',\n      chef_name:''\n    }\n    this.chefFindData=this.chefFindData.bind(this)\n    this.findChange=this.findChange.bind(this)\n    this.btnchefDetailData=this.btnchefDetailData.bind(this)\n  }\n  findChange(fd)\n  {\n    this.setState({fd:fd})\n  }\n  chefFindData()\n  {\n    axios({\n      method:'POST',\n      url:'http://localhost:8083/web/react_chef/chef_find.do',\n      headers:{\n        'Content-type':'application/x-www-form-urlencoding;charset=UTF-8'\n      },\n      params:{\n        fd:this.state.fd,\n        chef:this.state.chef_name\n      }\n    }).then((response)=>{\n      console.log(response)\n      this.setState({recipe:response.data})\n      //this.state.chef=response.data\n      // 데이터 갱신 => 브라우저 갱신된 데이터 출력 render()호출\n    })\n  }\n  btnchefDetailData()\n  {\n    axios({\n      method:'POST',\n      url:'http://localhost:8083/web/react_chef/chef_detail.do',\n      headers:{\n        'Content-type':'application/x-www-form-urlencoding;charset=UTF-8'\n      },\n      params:{\n        chef:this.state.chef_name\n\n      }\n    }).then((response)=>{\n      console.log(response)\n      this.setState({isShow:1,recipe:response.data})\n      //this.state.chef=response.data\n      // 데이터 갱신 => 브라우저 갱신된 데이터 출력 render()호출\n    })\n  }\n  chefDetailData(chef)\n  {\n    axios({\n      method:'POST',\n      url:'http://localhost:8083/web/react_chef/chef_detail.do',\n      headers:{\n        'Content-type':'application/x-www-form-urlencoding;charset=UTF-8'\n      },\n      params:{\n        chef:chef\n\n      }\n    }).then((response)=>{\n      console.log(response)\n      this.setState({isShow:1,recipe:response.data,chef_name:chef})\n      //this.state.chef=response.data\n      // 데이터 갱신 => 브라우저 갱신된 데이터 출력 render()호출\n    })\n  }\n  post()\n  {\n    axios({\n      method:'POST',\n      url:'http://localhost:8083/web/react_chef/chef_list.do',\n      headers:{\n        'Content-type':'application/x-www-form-urlencoding;charset=UTF-8'\n      },\n      params:{\n        page:this.state.page\n      }\n    }).then((response)=>{\n      console.log(response)\n      this.setState({chef:response.data})\n      //this.state.chef=response.data\n      // 데이터 갱신 => 브라우저 갱신된 데이터 출력 render()호출\n    })\n  }\n  componentWillMount() {\n    axios.get(\"http://localhost:80/web/react_chef/totalpage.do\")\n        .then((response)=>{\n          this.setState({totalpage:response.data})\n        })\n    this.post();\n  }\n  // HTML을 만들어서 전송 => index.html <div id=\"root\">(HTML)</div>\n  render() {\n    const html=this.state.chef.map((m)=>\n        <table className={\"table\"}>\n          <tr>\n            <td className={\"text-center\"} width={\"30%\"} rowSpan={\"2\"}>\n              <img src={m.poster} style={{\"width\":\"200px\",\"height\":\"80px\"}}/>\n            </td>\n            <td colSpan={\"4\"} style={{\"color\":\"orange\"}}>\n              <h3 onClick={this.chefDetailData.bind(this,m.chef)}>{m.chef}</h3></td>\n          </tr>\n          <tr>\n            <td className={\"text-left\"}>\n              <img src={\"1.png\"}/>{m.mc1}\n            </td>\n            <td className={\"text-left\"}>\n              <img src={\"3.png\"}/>{m.mc3}\n            </td>\n            <td className={\"text-left\"}>\n              <img src={\"7.png\"}/>{m.mc7}\n            </td>\n            <td className={\"text-left\"}>\n              <img src={\"2.png\"}/>{m.mc2}\n            </td>\n          </tr>\n        </table>\n    )\n    return(\n        <div className={\"row\"}>\n          <div className={\"col-sm-7\"}>\n            <h3 className={\"text-center\"}>쉐프 목록</h3>\n            <table className={\"table\"}>\n              <tbody>\n              <tr>\n                <td>{html}</td>\n              </tr>\n              </tbody>\n            </table>\n            <table className={\"table\"}>\n              <tr>\n                <td className={\"text-center\"}>\n                  <input type={\"button\"} onClick={this.prev}\n                         value={\"이전\"} className={\"btn btn-sm btn-info\"}/>\n                  {this.state.page} page / {this.state.totalpage} pages\n                  <input type={\"button\"} onClick={this.next}\n                         value={\"다음\"} className={\"btn btn-sm btn-warning\"}/>\n                </td>\n              </tr>\n            </table>\n          </div>\n          <div className={\"col-sm-5\"}>\n            {this.state.isShow===1?<ChefDetail recipe={this.state.recipe} onFindChange={this.findChange} onBtnClick={this.chefFindData} onTotalClick={this.btnchefDetailData}/>:null}\n          </div>\n        </div>\n    )\n  }\n}\nclass ChefDetail extends Component{\n  constructor(props) {\n    super(props);\n    this.state={\n      fd:'',\n      chef:''\n    }\n    this.btnClick=this.btnClick.bind(this)\n    this.fdChange=this.fdChange.bind(this)\n    this.totalClick=this.totalClick.bind(this)\n  }\n  totalClick()\n  {\n    this.props.onTotalClick()\n  }\n  //상위 클래스의 함수 호출시 => 속성으로 함수명 전송 => 하위클래스에 사용이 가능\n  btnClick()\n  {\n    this.props.onBtnClick()\n  }\n  fdChange(e)\n  {\n    this.props.onFindChange(e.target.value) // App\n  }\n  componentWillMount() {\n    this.setState({chef:this.props.recipe.chef})\n  }\n\n  render() {\n    const html=this.props.recipe.map((m)=>\n        <div className=\"col-md-6\">\n          <div className=\"product-item\">\n            <img src={m.poster} alt=\"Lights\" style={{\"width\":\"100%\"}}/>\n            <div className=\"down-content\">\n              <p style={{\"font-size\":\"8pt\"}}>{m.title.length>15?m.title.substring(0,15)+\"...\":m.title}</p>\n            </div>\n          </div>\n        </div>\n    )\n    return(\n        <Fragment>\n          <div style={{\"height\":\"50px\"}}></div>\n          <div className={\"row\"}>\n            <input type={\"text\"} className={\"input-sm\"} size={\"20\"} onChange={this.fdChange}/>\n            <button className={\"btn btn-sm btn-primary\"} onClick={this.btnClick}>검색</button>\n            <button className={\"btn btn-sm btn-danger\"} onClick={this.totalClick}>전체목록</button>\n          </div>\n          <div style={{\"height\":\"20px\"}}></div>\n          <div className={\"row\"}>\n            {html}\n          </div>\n        </Fragment>\n    )\n  }\n}\nexport default App;",["21","22"],"C:\\Users\\SIST\\WebstormProjects\\20201203-chef-react-spring\\src\\reportWebVitals.js",[],{"ruleId":"23","severity":1,"message":"24","line":113,"column":15,"nodeType":"25","endLine":113,"endColumn":78},{"ruleId":"23","severity":1,"message":"24","line":120,"column":15,"nodeType":"25","endLine":120,"endColumn":35},{"ruleId":"23","severity":1,"message":"24","line":123,"column":15,"nodeType":"25","endLine":123,"endColumn":35},{"ruleId":"23","severity":1,"message":"24","line":126,"column":15,"nodeType":"25","endLine":126,"endColumn":35},{"ruleId":"23","severity":1,"message":"24","line":129,"column":15,"nodeType":"25","endLine":129,"endColumn":35},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-global-assign","no-unsafe-negation"]